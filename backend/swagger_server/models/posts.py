# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Posts(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, title: str=None, content: str=None, created_by: int=None, community: int=None, time_created: datetime=None, upvotes: int=None, downvotes: int=None, views: int=None, is_deleted: bool=None, tags: List[str]=None, comments: List[int]=None, display_pic: str = None):  # noqa: E501
        """Posts - a model defined in Swagger

        :param id: The id of this Posts.  # noqa: E501
        :type id: int
        :param title: The title of this Posts.  # noqa: E501
        :type title: str
        :param content: The content of this Posts.  # noqa: E501
        :type content: str
        :param created_by: The created_by of this Posts.  # noqa: E501
        :type created_by: int
        :param community: The community of this Posts.  # noqa: E501
        :type community: int
        :param time_created: The time_created of this Posts.  # noqa: E501
        :type time_created: datetime
        :param upvotes: The upvotes of this Posts.  # noqa: E501
        :type upvotes: int
        :param downvotes: The downvotes of this Posts.  # noqa: E501
        :type downvotes: int
        :param views: The views of this Posts.  # noqa: E501
        :type views: int
        :param is_deleted: The is_deleted of this Posts.  # noqa: E501
        :type is_deleted: bool
        :param tags: The tags of this Posts.  # noqa: E501
        :type tags: List[str]
        :param comments: The comments of this Posts.  # noqa: E501
        :type comments: List[int]
        :param display_pic: The display_pic of this Posts.  # noqa: E501
        :type display_pic: str
        """
        self.swagger_types = {
            'id': int,
            'title': str,
            'content': str,
            'created_by': int,
            'community': int,
            'time_created': datetime,
            'upvotes': int,
            'downvotes': int,
            'views': int,
            'is_deleted': bool,
            'tags': List[str],
            'comments': List[int],
            'display_pic': str
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'content': 'content',
            'created_by': 'createdBy',
            'community': 'community',
            'time_created': 'timeCreated',
            'upvotes': 'upvotes',
            'downvotes': 'downvotes',
            'views': 'views',
            'is_deleted': 'isDeleted',
            'tags': 'tags',
            'comments': 'comments',
            'display_pic': 'displayPic'
        }
        self._id = id
        self._title = title
        self._content = content
        self._created_by = created_by
        self._community = community
        self._time_created = time_created
        self._upvotes = upvotes
        self._downvotes = downvotes
        self._views = views
        self._is_deleted = is_deleted
        self._tags = tags
        self._comments = comments
        self._display_pic = display_pic

    @classmethod
    def from_dict(cls, dikt) -> 'Posts':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Posts of this Posts.  # noqa: E501
        :rtype: Posts
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Posts.


        :return: The id of this Posts.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Posts.


        :param id: The id of this Posts.
        :type id: int
        """

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this Posts.


        :return: The title of this Posts.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Posts.


        :param title: The title of this Posts.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def content(self) -> str:
        """Gets the content of this Posts.


        :return: The content of this Posts.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this Posts.


        :param content: The content of this Posts.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def created_by(self) -> int:
        """Gets the created_by of this Posts.


        :return: The created_by of this Posts.
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by: int):
        """Sets the created_by of this Posts.


        :param created_by: The created_by of this Posts.
        :type created_by: int
        """

        self._created_by = created_by

    @property
    def community(self) -> int:
        """Gets the community of this Posts.


        :return: The community of this Posts.
        :rtype: int
        """
        return self._community

    @community.setter
    def community(self, community: int):
        """Sets the community of this Posts.


        :param community: The community of this Posts.
        :type community: int
        """
        if community is None:
            raise ValueError("Invalid value for `community`, must not be `None`")  # noqa: E501

        self._community = community

    @property
    def time_created(self) -> datetime:
        """Gets the time_created of this Posts.


        :return: The time_created of this Posts.
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created: datetime):
        """Sets the time_created of this Posts.


        :param time_created: The time_created of this Posts.
        :type time_created: datetime
        """

        self._time_created = time_created

    @property
    def upvotes(self) -> int:
        """Gets the upvotes of this Posts.


        :return: The upvotes of this Posts.
        :rtype: int
        """
        return self._upvotes

    @upvotes.setter
    def upvotes(self, upvotes: int):
        """Sets the upvotes of this Posts.


        :param upvotes: The upvotes of this Posts.
        :type upvotes: int
        """

        self._upvotes = upvotes

    @property
    def downvotes(self) -> int:
        """Gets the downvotes of this Posts.


        :return: The downvotes of this Posts.
        :rtype: int
        """
        return self._downvotes

    @downvotes.setter
    def downvotes(self, downvotes: int):
        """Sets the downvotes of this Posts.


        :param downvotes: The downvotes of this Posts.
        :type downvotes: int
        """

        self._downvotes = downvotes

    @property
    def views(self) -> int:
        """Gets the views of this Posts.


        :return: The views of this Posts.
        :rtype: int
        """
        return self._views

    @views.setter
    def views(self, views: int):
        """Sets the views of this Posts.


        :param views: The views of this Posts.
        :type views: int
        """

        self._views = views

    @property
    def is_deleted(self) -> bool:
        """Gets the is_deleted of this Posts.


        :return: The is_deleted of this Posts.
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted: bool):
        """Sets the is_deleted of this Posts.


        :param is_deleted: The is_deleted of this Posts.
        :type is_deleted: bool
        """

        self._is_deleted = is_deleted

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this Posts.


        :return: The tags of this Posts.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this Posts.


        :param tags: The tags of this Posts.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def comments(self) -> List[int]:
        """Gets the comments of this Posts.


        :return: The comments of this Posts.
        :rtype: List[int]
        """
        return self._comments

    @comments.setter
    def comments(self, comments: List[int]):
        """Sets the comments of this Posts.


        :param comments: The comments of this Posts.
        :type comments: List[int]
        """

        self._comments = comments

    @property
    def display_pic(self) -> str:
        """Gets the display_pic of this Posts.


        :return: The display_pic of this Posts.
        :rtype: str
        """
        return self._display_pic
    
    @display_pic.setter
    def display_pic(self, display_pic: str):
        """Sets the display_pic of this Posts.


        :param display_pic: The display_pic of this Posts.
        :type display_pic: str
        """

        self._display_pic = display_pic
