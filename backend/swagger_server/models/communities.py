# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Communities(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, community_id: int=None, name: str=None, description: str=None, time_created: datetime=None, display_pic: str=None, created_by: int=None, sub_count: int=None, admin: int=None, is_banned: bool=None, is_deleted: bool=None):  # noqa: E501
        """Communities - a model defined in Swagger

        :param community_id: The community_id of this Communities.  # noqa: E501
        :type community_id: int
        :param name: The name of this Communities.  # noqa: E501
        :type name: str
        :param description: The description of this Communities.  # noqa: E501
        :type description: str
        :param time_created: The time_created of this Communities.  # noqa: E501
        :type time_created: datetime
        :param display_pic: The display_pic of this Communities.  # noqa: E501
        :type display_pic: str
        :param created_by: The created_by of this Communities.  # noqa: E501
        :type created_by: int
        :param sub_count: The sub_count of this Communities.  # noqa: E501
        :type sub_count: int
        :param admin: The admin of this Communities.  # noqa: E501
        :type admin: int
        :param is_banned: The is_banned of this Communities.  # noqa: E501
        :type is_banned: bool
        :param is_deleted: The is_deleted of this Communities.  # noqa: E501
        :type is_deleted: bool
        """
        self.swagger_types = {
            'community_id': int,
            'name': str,
            'description': str,
            'time_created': datetime,
            'display_pic': str,
            'created_by': int,
            'sub_count': int,
            'admin': int,
            'is_banned': bool,
            'is_deleted': bool
        }

        self.attribute_map = {
            'community_id': 'communityID',
            'name': 'name',
            'description': 'description',
            'time_created': 'timeCreated',
            'display_pic': 'displayPic',
            'created_by': 'createdBy',
            'sub_count': 'subCount',
            'admin': 'admin',
            'is_banned': 'isBanned',
            'is_deleted': 'isDeleted'
        }
        self._community_id = community_id
        self._name = name
        self._description = description
        self._time_created = time_created
        self._display_pic = display_pic
        self._created_by = created_by
        self._sub_count = sub_count
        self._admin = admin
        self._is_banned = is_banned
        self._is_deleted = is_deleted

    @classmethod
    def from_dict(cls, dikt) -> 'Communities':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Communities of this Communities.  # noqa: E501
        :rtype: Communities
        """
        return util.deserialize_model(dikt, cls)

    @property
    def community_id(self) -> int:
        """Gets the community_id of this Communities.


        :return: The community_id of this Communities.
        :rtype: int
        """
        return self._community_id

    @community_id.setter
    def community_id(self, community_id: int):
        """Sets the community_id of this Communities.


        :param community_id: The community_id of this Communities.
        :type community_id: int
        """

        self._community_id = community_id

    @property
    def name(self) -> str:
        """Gets the name of this Communities.


        :return: The name of this Communities.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Communities.


        :param name: The name of this Communities.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this Communities.


        :return: The description of this Communities.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Communities.


        :param description: The description of this Communities.
        :type description: str
        """

        self._description = description

    @property
    def time_created(self) -> datetime:
        """Gets the time_created of this Communities.


        :return: The time_created of this Communities.
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created: datetime):
        """Sets the time_created of this Communities.


        :param time_created: The time_created of this Communities.
        :type time_created: datetime
        """

        self._time_created = time_created

    @property
    def display_pic(self) -> str:
        """Gets the display_pic of this Communities.


        :return: The display_pic of this Communities.
        :rtype: str
        """
        return self._display_pic

    @display_pic.setter
    def display_pic(self, display_pic: str):
        """Sets the display_pic of this Communities.


        :param display_pic: The display_pic of this Communities.
        :type display_pic: str
        """

        self._display_pic = display_pic

    @property
    def created_by(self) -> int:
        """Gets the created_by of this Communities.


        :return: The created_by of this Communities.
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by: int):
        """Sets the created_by of this Communities.


        :param created_by: The created_by of this Communities.
        :type created_by: int
        """

        self._created_by = created_by

    @property
    def sub_count(self) -> int:
        """Gets the sub_count of this Communities.


        :return: The sub_count of this Communities.
        :rtype: int
        """
        return self._sub_count

    @sub_count.setter
    def sub_count(self, sub_count: int):
        """Sets the sub_count of this Communities.


        :param sub_count: The sub_count of this Communities.
        :type sub_count: int
        """

        self._sub_count = sub_count

    @property
    def admin(self) -> int:
        """Gets the admin of this Communities.


        :return: The admin of this Communities.
        :rtype: int
        """
        return self._admin

    @admin.setter
    def admin(self, admin: int):
        """Sets the admin of this Communities.


        :param admin: The admin of this Communities.
        :type admin: int
        """

        self._admin = admin

    @property
    def is_banned(self) -> bool:
        """Gets the is_banned of this Communities.


        :return: The is_banned of this Communities.
        :rtype: bool
        """
        return self._is_banned

    @is_banned.setter
    def is_banned(self, is_banned: bool):
        """Sets the is_banned of this Communities.


        :param is_banned: The is_banned of this Communities.
        :type is_banned: bool
        """

        self._is_banned = is_banned

    @property
    def is_deleted(self) -> bool:
        """Gets the is_deleted of this Communities.


        :return: The is_deleted of this Communities.
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted: bool):
        """Sets the is_deleted of this Communities.


        :param is_deleted: The is_deleted of this Communities.
        :type is_deleted: bool
        """

        self._is_deleted = is_deleted
