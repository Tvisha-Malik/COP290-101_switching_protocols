# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Moderators(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, moderator_id: int=None, user_id: int=None, community_id: int=None, time_added: datetime=None):  # noqa: E501
        """Moderators - a model defined in Swagger

        :param moderator_id: The moderator_id of this Moderators.  # noqa: E501
        :type moderator_id: int
        :param user_id: The user_id of this Moderators.  # noqa: E501
        :type user_id: int
        :param community_id: The community_id of this Moderators.  # noqa: E501
        :type community_id: int
        :param time_added: The time_added of this Moderators.  # noqa: E501
        :type time_added: datetime
        """
        self.swagger_types = {
            'moderator_id': int,
            'user_id': int,
            'community_id': int,
            'time_added': datetime
        }

        self.attribute_map = {
            'moderator_id': 'moderatorID',
            'user_id': 'userID',
            'community_id': 'communityID',
            'time_added': 'timeAdded'
        }
        self._moderator_id = moderator_id
        self._user_id = user_id
        self._community_id = community_id
        self._time_added = time_added

    @classmethod
    def from_dict(cls, dikt) -> 'Moderators':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Moderators of this Moderators.  # noqa: E501
        :rtype: Moderators
        """
        return util.deserialize_model(dikt, cls)

    @property
    def moderator_id(self) -> int:
        """Gets the moderator_id of this Moderators.


        :return: The moderator_id of this Moderators.
        :rtype: int
        """
        return self._moderator_id

    @moderator_id.setter
    def moderator_id(self, moderator_id: int):
        """Sets the moderator_id of this Moderators.


        :param moderator_id: The moderator_id of this Moderators.
        :type moderator_id: int
        """

        self._moderator_id = moderator_id

    @property
    def user_id(self) -> int:
        """Gets the user_id of this Moderators.


        :return: The user_id of this Moderators.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this Moderators.


        :param user_id: The user_id of this Moderators.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def community_id(self) -> int:
        """Gets the community_id of this Moderators.


        :return: The community_id of this Moderators.
        :rtype: int
        """
        return self._community_id

    @community_id.setter
    def community_id(self, community_id: int):
        """Sets the community_id of this Moderators.


        :param community_id: The community_id of this Moderators.
        :type community_id: int
        """

        self._community_id = community_id

    @property
    def time_added(self) -> datetime:
        """Gets the time_added of this Moderators.


        :return: The time_added of this Moderators.
        :rtype: datetime
        """
        return self._time_added

    @time_added.setter
    def time_added(self, time_added: datetime):
        """Sets the time_added of this Moderators.


        :param time_added: The time_added of this Moderators.
        :type time_added: datetime
        """

        self._time_added = time_added
