# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PostsDb(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, post_id: int=None, title: str=None, content: str=None, created_by: int=None, community_id: int=None, time_created: datetime=None, upvotes: int=None, downvotes: int=None, view_count: int=None, is_deleted: bool=None, display_pic: str=None):  # noqa: E501
        """PostsDb - a model defined in Swagger

        :param post_id: The post_id of this PostsDb.  # noqa: E501
        :type post_id: int
        :param title: The title of this PostsDb.  # noqa: E501
        :type title: str
        :param content: The content of this PostsDb.  # noqa: E501
        :type content: str
        :param created_by: The created_by of this PostsDb.  # noqa: E501
        :type created_by: int
        :param community_id: The community_id of this PostsDb.  # noqa: E501
        :type community_id: int
        :param time_created: The time_created of this PostsDb.  # noqa: E501
        :type time_created: datetime
        :param upvotes: The upvotes of this PostsDb.  # noqa: E501
        :type upvotes: int
        :param downvotes: The downvotes of this PostsDb.  # noqa: E501
        :type downvotes: int
        :param view_count: The view_count of this PostsDb.  # noqa: E501
        :type view_count: int
        :param is_deleted: The is_deleted of this PostsDb.  # noqa: E501
        :type is_deleted: bool
        :param display_pic: The display_pic of this PostsDb.  # noqa: E501
        :type display_pic: str
        """
        self.swagger_types = {
            'post_id': int,
            'title': str,
            'content': str,
            'created_by': int,
            'community_id': int,
            'time_created': datetime,
            'upvotes': int,
            'downvotes': int,
            'view_count': int,
            'is_deleted': bool,
            'display_pic': str
        }

        self.attribute_map = {
            'post_id': 'postID',
            'title': 'title',
            'content': 'content',
            'created_by': 'createdBy',
            'community_id': 'communityID',
            'time_created': 'timeCreated',
            'upvotes': 'upvotes',
            'downvotes': 'downvotes',
            'view_count': 'viewCount',
            'is_deleted': 'isDeleted',
            'display_pic': 'displayPic'
        }
        self._post_id = post_id
        self._title = title
        self._content = content
        self._created_by = created_by
        self._community_id = community_id
        self._time_created = time_created
        self._upvotes = upvotes
        self._downvotes = downvotes
        self._view_count = view_count
        self._is_deleted = is_deleted
        self._display_pic = display_pic

    @classmethod
    def from_dict(cls, dikt) -> 'PostsDb':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PostsDb of this PostsDb.  # noqa: E501
        :rtype: PostsDb
        """
        return util.deserialize_model(dikt, cls)

    @property
    def post_id(self) -> int:
        """Gets the post_id of this PostsDb.


        :return: The post_id of this PostsDb.
        :rtype: int
        """
        return self._post_id

    @post_id.setter
    def post_id(self, post_id: int):
        """Sets the post_id of this PostsDb.


        :param post_id: The post_id of this PostsDb.
        :type post_id: int
        """

        self._post_id = post_id

    @property
    def title(self) -> str:
        """Gets the title of this PostsDb.


        :return: The title of this PostsDb.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this PostsDb.


        :param title: The title of this PostsDb.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def content(self) -> str:
        """Gets the content of this PostsDb.


        :return: The content of this PostsDb.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this PostsDb.


        :param content: The content of this PostsDb.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def created_by(self) -> int:
        """Gets the created_by of this PostsDb.


        :return: The created_by of this PostsDb.
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by: int):
        """Sets the created_by of this PostsDb.


        :param created_by: The created_by of this PostsDb.
        :type created_by: int
        """

        self._created_by = created_by

    @property
    def community_id(self) -> int:
        """Gets the community_id of this PostsDb.


        :return: The community_id of this PostsDb.
        :rtype: int
        """
        return self._community_id

    @community_id.setter
    def community_id(self, community_id: int):
        """Sets the community_id of this PostsDb.


        :param community_id: The community_id of this PostsDb.
        :type community_id: int
        """

        self._community_id = community_id

    @property
    def time_created(self) -> datetime:
        """Gets the time_created of this PostsDb.


        :return: The time_created of this PostsDb.
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created: datetime):
        """Sets the time_created of this PostsDb.


        :param time_created: The time_created of this PostsDb.
        :type time_created: datetime
        """

        self._time_created = time_created

    @property
    def upvotes(self) -> int:
        """Gets the upvotes of this PostsDb.


        :return: The upvotes of this PostsDb.
        :rtype: int
        """
        return self._upvotes

    @upvotes.setter
    def upvotes(self, upvotes: int):
        """Sets the upvotes of this PostsDb.


        :param upvotes: The upvotes of this PostsDb.
        :type upvotes: int
        """

        self._upvotes = upvotes

    @property
    def downvotes(self) -> int:
        """Gets the downvotes of this PostsDb.


        :return: The downvotes of this PostsDb.
        :rtype: int
        """
        return self._downvotes

    @downvotes.setter
    def downvotes(self, downvotes: int):
        """Sets the downvotes of this PostsDb.


        :param downvotes: The downvotes of this PostsDb.
        :type downvotes: int
        """

        self._downvotes = downvotes

    @property
    def view_count(self) -> int:
        """Gets the view_count of this PostsDb.


        :return: The view_count of this PostsDb.
        :rtype: int
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count: int):
        """Sets the view_count of this PostsDb.


        :param view_count: The view_count of this PostsDb.
        :type view_count: int
        """

        self._view_count = view_count

    @property
    def is_deleted(self) -> bool:
        """Gets the is_deleted of this PostsDb.


        :return: The is_deleted of this PostsDb.
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted: bool):
        """Sets the is_deleted of this PostsDb.


        :param is_deleted: The is_deleted of this PostsDb.
        :type is_deleted: bool
        """

        self._is_deleted = is_deleted

    @property
    def display_pic(self) -> str:
        """Gets the display_pic of this PostsDb.


        :return: The display_pic of this PostsDb.
        :rtype: str
        """
        return self._display_pic

    @display_pic.setter
    def display_pic(self, display_pic: str):
        """Sets the display_pic of this PostsDb.


        :param display_pic: The display_pic of this PostsDb.
        :type display_pic: str
        """

        self._display_pic = display_pic
