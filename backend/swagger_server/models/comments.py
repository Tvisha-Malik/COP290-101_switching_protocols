# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util

class Comments(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, post_id: int=None, comment_id: int=None, content: str=None, user_id: int=None, parent_comment_id: int=None, time_created: datetime=None, upvotes: int=None, downvotes: int=None):  # noqa: E501
        """Comments - a model defined in Swagger

        :param post_id: The post_id of this Comments.  # noqa: E501
        :type post_id: int
        :param comment_id: The comment_id of this Comments.  # noqa: E501
        :type comment_id: int
        :param content: The content of this Comments.  # noqa: E501
        :type content: str
        :param user_id: The user_id of this Comments.  # noqa: E501
        :type user_id: int
        :param parent_comment_id: The parent_comment_id of this Comments.  # noqa: E501
        :type parent_comment_id: int
        :param time_created: The time_created of this Comments.  # noqa: E501
        :type time_created: datetime
        :param upvotes: The upvotes of this Comments.  # noqa: E501
        :type upvotes: int
        :param downvotes: The downvotes of this Comments.  # noqa: E501
        :type downvotes: int
        """
        self.swagger_types = {
            'post_id': int,
            'comment_id': int,
            'content': str,
            'user_id': int,
            'parent_comment_id': int,
            'time_created': datetime,
            'upvotes': int,
            'downvotes': int
        }

        self.attribute_map = {
            'post_id': 'postID',
            'comment_id': 'commentID',
            'content': 'content',
            'user_id': 'userID',
            'parent_comment_id': 'parentCommentID',
            'time_created': 'timeCreated',
            'upvotes': 'upvotes',
            'downvotes': 'downvotes'
        }
        self._post_id = post_id
        self._comment_id = comment_id
        self._content = content
        self._user_id = user_id
        self._parent_comment_id = parent_comment_id
        self._time_created = time_created
        self._upvotes = upvotes
        self._downvotes = downvotes

    @classmethod
    def from_dict(cls, dikt) -> 'Comments':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Comments of this Comments.  # noqa: E501
        :rtype: Comments
        """
        return util.deserialize_model(dikt, cls)

    @property
    def post_id(self) -> int:
        """Gets the post_id of this Comments.


        :return: The post_id of this Comments.
        :rtype: int
        """
        return self._post_id

    @post_id.setter
    def post_id(self, post_id: int):
        """Sets the post_id of this Comments.


        :param post_id: The post_id of this Comments.
        :type post_id: int
        """

        self._post_id = post_id

    @property
    def comment_id(self) -> int:
        """Gets the comment_id of this Comments.


        :return: The comment_id of this Comments.
        :rtype: int
        """
        return self._comment_id

    @comment_id.setter
    def comment_id(self, comment_id: int):
        """Sets the comment_id of this Comments.


        :param comment_id: The comment_id of this Comments.
        :type comment_id: int
        """

        self._comment_id = comment_id

    @property
    def content(self) -> str:
        """Gets the content of this Comments.


        :return: The content of this Comments.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this Comments.


        :param content: The content of this Comments.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def user_id(self) -> int:
        """Gets the user_id of this Comments.


        :return: The user_id of this Comments.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this Comments.


        :param user_id: The user_id of this Comments.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def parent_comment_id(self) -> int:
        """Gets the parent_comment_id of this Comments.


        :return: The parent_comment_id of this Comments.
        :rtype: int
        """
        return self._parent_comment_id

    @parent_comment_id.setter
    def parent_comment_id(self, parent_comment_id: int):
        """Sets the parent_comment_id of this Comments.


        :param parent_comment_id: The parent_comment_id of this Comments.
        :type parent_comment_id: int
        """

        self._parent_comment_id = parent_comment_id

    @property
    def time_created(self) -> datetime:
        """Gets the time_created of this Comments.


        :return: The time_created of this Comments.
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created: datetime):
        """Sets the time_created of this Comments.


        :param time_created: The time_created of this Comments.
        :type time_created: datetime
        """

        self._time_created = time_created

    @property
    def upvotes(self) -> int:
        """Gets the upvotes of this Comments.


        :return: The upvotes of this Comments.
        :rtype: int
        """
        return self._upvotes

    @upvotes.setter
    def upvotes(self, upvotes: int):
        """Sets the upvotes of this Comments.


        :param upvotes: The upvotes of this Comments.
        :type upvotes: int
        """

        self._upvotes = upvotes

    @property
    def downvotes(self) -> int:
        """Gets the downvotes of this Comments.


        :return: The downvotes of this Comments.
        :rtype: int
        """
        return self._downvotes

    @downvotes.setter
    def downvotes(self, downvotes: int):
        """Sets the downvotes of this Comments.


        :param downvotes: The downvotes of this Comments.
        :type downvotes: int
        """

        self._downvotes = downvotes
