# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_id: int=None, username: str=None, email_address: str=None, password: str=None, time_joined: datetime=None, last_login: datetime=None, user_status: int=None, profile_picture: str=None, karma: int=None, user_preferences: int=None):  # noqa: E501
        """User - a model defined in Swagger

        :param user_id: The user_id of this User.  # noqa: E501
        :type user_id: int
        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param email_address: The email_address of this User.  # noqa: E501
        :type email_address: str
        :param password: The password of this User.  # noqa: E501
        :type password: str
        :param time_joined: The time_joined of this User.  # noqa: E501
        :type time_joined: datetime
        :param last_login: The last_login of this User.  # noqa: E501
        :type last_login: datetime
        :param user_status: The user_status of this User.  # noqa: E501
        :type user_status: int
        :param profile_picture: The profile_picture of this User.  # noqa: E501
        :type profile_picture: str
        :param karma: The karma of this User.  # noqa: E501
        :type karma: int
        :param user_preferences: The user_preferences of this User.  # noqa: E501
        :type user_preferences: int
        """
        self.swagger_types = {
            'user_id': int,
            'username': str,
            'email_address': str,
            'password': str,
            'time_joined': datetime,
            'last_login': datetime,
            'user_status': int,
            'profile_picture': str,
            'karma': int,
            'user_preferences': int
        }

        self.attribute_map = {
            'user_id': 'UserID',
            'username': 'username',
            'email_address': 'emailAddress',
            'password': 'password',
            'time_joined': 'timeJoined',
            'last_login': 'lastLogin',
            'user_status': 'userStatus',
            'profile_picture': 'profilePicture',
            'karma': 'karma',
            'user_preferences': 'userPreferences'
        }
        self._user_id = user_id
        self._username = username
        self._email_address = email_address
        self._password = password
        self._time_joined = time_joined
        self._last_login = last_login
        self._user_status = user_status
        self._profile_picture = profile_picture
        self._karma = karma
        self._user_preferences = user_preferences

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> int:
        """Gets the user_id of this User.


        :return: The user_id of this User.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this User.


        :param user_id: The user_id of this User.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def username(self) -> str:
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def email_address(self) -> str:
        """Gets the email_address of this User.


        :return: The email_address of this User.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address: str):
        """Sets the email_address of this User.


        :param email_address: The email_address of this User.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def password(self) -> str:
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def time_joined(self) -> datetime:
        """Gets the time_joined of this User.


        :return: The time_joined of this User.
        :rtype: datetime
        """
        return self._time_joined

    @time_joined.setter
    def time_joined(self, time_joined: datetime):
        """Sets the time_joined of this User.


        :param time_joined: The time_joined of this User.
        :type time_joined: datetime
        """

        self._time_joined = time_joined

    @property
    def last_login(self) -> datetime:
        """Gets the last_login of this User.


        :return: The last_login of this User.
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login: datetime):
        """Sets the last_login of this User.


        :param last_login: The last_login of this User.
        :type last_login: datetime
        """

        self._last_login = last_login

    @property
    def user_status(self) -> int:
        """Gets the user_status of this User.

        User Status  # noqa: E501

        :return: The user_status of this User.
        :rtype: int
        """
        return self._user_status

    @user_status.setter
    def user_status(self, user_status: int):
        """Sets the user_status of this User.

        User Status  # noqa: E501

        :param user_status: The user_status of this User.
        :type user_status: int
        """

        self._user_status = user_status

    @property
    def profile_picture(self) -> str:
        """Gets the profile_picture of this User.


        :return: The profile_picture of this User.
        :rtype: str
        """
        return self._profile_picture

    @profile_picture.setter
    def profile_picture(self, profile_picture: str):
        """Sets the profile_picture of this User.


        :param profile_picture: The profile_picture of this User.
        :type profile_picture: str
        """

        self._profile_picture = profile_picture

    @property
    def karma(self) -> int:
        """Gets the karma of this User.


        :return: The karma of this User.
        :rtype: int
        """
        return self._karma

    @karma.setter
    def karma(self, karma: int):
        """Sets the karma of this User.


        :param karma: The karma of this User.
        :type karma: int
        """

        self._karma = karma

    @property
    def user_preferences(self) -> int:
        """Gets the user_preferences of this User.


        :return: The user_preferences of this User.
        :rtype: int
        """
        return self._user_preferences

    @user_preferences.setter
    def user_preferences(self, user_preferences: int):
        """Sets the user_preferences of this User.


        :param user_preferences: The user_preferences of this User.
        :type user_preferences: int
        """

        self._user_preferences = user_preferences
