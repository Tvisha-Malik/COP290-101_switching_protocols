# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Preferences(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, preference_id: int=None, sort_home: str=None, time: datetime=None, sort_trending: str=None, sort_communities: str=None, language: str='English', blur_nsfw: bool=True, autoplay: bool=True, dark_mode: bool=False):  # noqa: E501
        """Preferences - a model defined in Swagger

        :param preference_id: The preference_id of this Preferences.  # noqa: E501
        :type preference_id: int
        :param sort_home: The sort_home of this Preferences.  # noqa: E501
        :type sort_home: str
        :param time: The time of this Preferences.  # noqa: E501
        :type time: datetime
        :param sort_trending: The sort_trending of this Preferences.  # noqa: E501
        :type sort_trending: str
        :param sort_communities: The sort_communities of this Preferences.  # noqa: E501
        :type sort_communities: str
        :param language: The language of this Preferences.  # noqa: E501
        :type language: str
        :param blur_nsfw: The blur_nsfw of this Preferences.  # noqa: E501
        :type blur_nsfw: bool
        :param autoplay: The autoplay of this Preferences.  # noqa: E501
        :type autoplay: bool
        :param dark_mode: The dark_mode of this Preferences.  # noqa: E501
        :type dark_mode: bool
        """
        self.swagger_types = {
            'preference_id': int,
            'sort_home': str,
            'time': datetime,
            'sort_trending': str,
            'sort_communities': str,
            'language': str,
            'blur_nsfw': bool,
            'autoplay': bool,
            'dark_mode': bool
        }

        self.attribute_map = {
            'preference_id': 'preferenceID',
            'sort_home': 'sortHome',
            'time': 'time',
            'sort_trending': 'sortTrending',
            'sort_communities': 'sortCommunities',
            'language': 'language',
            'blur_nsfw': 'blurNSFW',
            'autoplay': 'autoplay',
            'dark_mode': 'darkMode'
        }
        self._preference_id = preference_id
        self._sort_home = sort_home
        self._time = time
        self._sort_trending = sort_trending
        self._sort_communities = sort_communities
        self._language = language
        self._blur_nsfw = blur_nsfw
        self._autoplay = autoplay
        self._dark_mode = dark_mode

    @classmethod
    def from_dict(cls, dikt) -> 'Preferences':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Preferences of this Preferences.  # noqa: E501
        :rtype: Preferences
        """
        return util.deserialize_model(dikt, cls)

    @property
    def preference_id(self) -> int:
        """Gets the preference_id of this Preferences.


        :return: The preference_id of this Preferences.
        :rtype: int
        """
        return self._preference_id

    @preference_id.setter
    def preference_id(self, preference_id: int):
        """Sets the preference_id of this Preferences.


        :param preference_id: The preference_id of this Preferences.
        :type preference_id: int
        """

        self._preference_id = preference_id

    @property
    def sort_home(self) -> str:
        """Gets the sort_home of this Preferences.


        :return: The sort_home of this Preferences.
        :rtype: str
        """
        return self._sort_home

    @sort_home.setter
    def sort_home(self, sort_home: str):
        """Sets the sort_home of this Preferences.


        :param sort_home: The sort_home of this Preferences.
        :type sort_home: str
        """
        allowed_values = ["Best", "New", "Controversial", "Old"]  # noqa: E501
        if sort_home not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_home` ({0}), must be one of {1}"
                .format(sort_home, allowed_values)
            )

        self._sort_home = sort_home

    @property
    def time(self) -> datetime:
        """Gets the time of this Preferences.


        :return: The time of this Preferences.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time: datetime):
        """Sets the time of this Preferences.


        :param time: The time of this Preferences.
        :type time: datetime
        """

        self._time = time

    @property
    def sort_trending(self) -> str:
        """Gets the sort_trending of this Preferences.


        :return: The sort_trending of this Preferences.
        :rtype: str
        """
        return self._sort_trending

    @sort_trending.setter
    def sort_trending(self, sort_trending: str):
        """Sets the sort_trending of this Preferences.


        :param sort_trending: The sort_trending of this Preferences.
        :type sort_trending: str
        """
        allowed_values = ["Best", "New", "Controversial", "Old"]  # noqa: E501
        if sort_trending not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_trending` ({0}), must be one of {1}"
                .format(sort_trending, allowed_values)
            )

        self._sort_trending = sort_trending

    @property
    def sort_communities(self) -> str:
        """Gets the sort_communities of this Preferences.


        :return: The sort_communities of this Preferences.
        :rtype: str
        """
        return self._sort_communities

    @sort_communities.setter
    def sort_communities(self, sort_communities: str):
        """Sets the sort_communities of this Preferences.


        :param sort_communities: The sort_communities of this Preferences.
        :type sort_communities: str
        """
        allowed_values = ["Best", "New", "Controversial", "Old"]  # noqa: E501
        if sort_communities not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_communities` ({0}), must be one of {1}"
                .format(sort_communities, allowed_values)
            )

        self._sort_communities = sort_communities

    @property
    def language(self) -> str:
        """Gets the language of this Preferences.


        :return: The language of this Preferences.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str):
        """Sets the language of this Preferences.


        :param language: The language of this Preferences.
        :type language: str
        """
        allowed_values = ["English"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def blur_nsfw(self) -> bool:
        """Gets the blur_nsfw of this Preferences.


        :return: The blur_nsfw of this Preferences.
        :rtype: bool
        """
        return self._blur_nsfw

    @blur_nsfw.setter
    def blur_nsfw(self, blur_nsfw: bool):
        """Sets the blur_nsfw of this Preferences.


        :param blur_nsfw: The blur_nsfw of this Preferences.
        :type blur_nsfw: bool
        """

        self._blur_nsfw = blur_nsfw

    @property
    def autoplay(self) -> bool:
        """Gets the autoplay of this Preferences.


        :return: The autoplay of this Preferences.
        :rtype: bool
        """
        return self._autoplay

    @autoplay.setter
    def autoplay(self, autoplay: bool):
        """Sets the autoplay of this Preferences.


        :param autoplay: The autoplay of this Preferences.
        :type autoplay: bool
        """

        self._autoplay = autoplay

    @property
    def dark_mode(self) -> bool:
        """Gets the dark_mode of this Preferences.


        :return: The dark_mode of this Preferences.
        :rtype: bool
        """
        return self._dark_mode

    @dark_mode.setter
    def dark_mode(self, dark_mode: bool):
        """Sets the dark_mode of this Preferences.


        :param dark_mode: The dark_mode of this Preferences.
        :type dark_mode: bool
        """

        self._dark_mode = dark_mode
